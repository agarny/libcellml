/* The content of this file was generated using a modified C profile of libCellML 0.6.0. */

double xor(double x, double y)
{
    return (x != 0.0) ^ (y != 0.0);
}

double sec(double x)
{
    return 1.0/cos(x);
}

double csc(double x)
{
    return 1.0/sin(x);
}

double cot(double x)
{
    return 1.0/tan(x);
}

double sech(double x)
{
    return 1.0/cosh(x);
}

double csch(double x)
{
    return 1.0/sinh(x);
}

double coth(double x)
{
    return 1.0/tanh(x);
}

double asec(double x)
{
    return acos(1.0/x);
}

double acsc(double x)
{
    return asin(1.0/x);
}

double acot(double x)
{
    return atan(1.0/x);
}

double asech(double x)
{
    return acosh(1.0/x);
}

double acsch(double x)
{
    return asinh(1.0/x);
}

double acoth(double x)
{
    return atanh(1.0/x);
}

double * createStatesArray()
{
    double *res = (double *) malloc(STATE_COUNT*sizeof(double));

    for (size_t i = 0; i < STATE_COUNT; ++i) {
        res[i] = NAN;
    }

    return res;
}

double * createConstantsArray()
{
    double *res = (double *) malloc(CONSTANT_COUNT*sizeof(double));

    for (size_t i = 0; i < CONSTANT_COUNT; ++i) {
        res[i] = NAN;
    }

    return res;
}

double * createComputedConstantsArray()
{
    double *res = (double *) malloc(COMPUTED_CONSTANT_COUNT*sizeof(double));

    for (size_t i = 0; i < COMPUTED_CONSTANT_COUNT; ++i) {
        res[i] = NAN;
    }

    return res;
}

double * createAlgebraicArray()
{
    double *res = (double *) malloc(ALGEBRAIC_COUNT*sizeof(double));

    for (size_t i = 0; i < ALGEBRAIC_COUNT; ++i) {
        res[i] = NAN;
    }

    return res;
}

double * createExternalsArray()
{
    double *res = (double *) malloc(EXTERNAL_COUNT*sizeof(double));

    for (size_t i = 0; i < EXTERNAL_COUNT; ++i) {
        res[i] = NAN;
    }

    return res;
}

void deleteArray(double *array)
{
    free(array);
}

typedef struct {
    double voi;
    double *states;
    double *rates;
    double *constants;
    double *computedConstants;
    double *algebraic;
    double *externals;
} RootFindingInfo;

extern void nlaSolve(void (*objectiveFunction)(double *, double *, void *),
                     double *u, size_t n, void *data);

void objectiveFunction0(double *u, double *f, void *data)
{
    double voi = ((RootFindingInfo *) data)->voi;
    double *states = ((RootFindingInfo *) data)->states;
    double *rates = ((RootFindingInfo *) data)->rates;
    double *constants = ((RootFindingInfo *) data)->constants;
    double *computedConstants = ((RootFindingInfo *) data)->computedConstants;
    double *algebraic = ((RootFindingInfo *) data)->algebraic;
    double *externals = ((RootFindingInfo *) data)->externals;

    algebraic[3] = u[0];
    algebraic[4] = u[1];

    f[0] = algebraic[3]+algebraic[4]+states[0]-0.0;
    f[1] = algebraic[3]-algebraic[4]-(computedConstants[205]+computedConstants[206]);
}

void findRoot0(double voi, double *states, double *rates, double *constants, double *computedConstants, double *algebraic, double *externals)
{
    RootFindingInfo rfi = { voi, states, rates, constants, computedConstants, algebraic, externals };
    double u[2];

    u[0] = algebraic[3];
    u[1] = algebraic[4];

    nlaSolve(objectiveFunction0, u, 2, &rfi);

    algebraic[3] = u[0];
    algebraic[4] = u[1];
}

void initialiseVariables(double *states, double *rates, double *constants, double *computedConstants, double *algebraic)
{
    states[0] = 0.0;
    constants[0] = 1.0;
    constants[1] = 2.0;
    constants[2] = 3.0;
    constants[3] = 4.0;
    constants[4] = 5.0;
    constants[5] = 6.0;
    constants[6] = 7.0;
    computedConstants[169] = NAN;
    computedConstants[179] = 123.0;
    computedConstants[180] = 123.456789;
    computedConstants[181] = 123.0e99;
    computedConstants[182] = 123.456789e99;
    computedConstants[184] = 1.0;
    computedConstants[185] = 0.0;
    computedConstants[186] = 2.71828182845905;
    computedConstants[187] = 3.14159265358979;
    computedConstants[188] = INFINITY;
    computedConstants[189] = NAN;
    computedConstants[205] = 1.0;
    computedConstants[206] = 3.0;
    algebraic[3] = 1.0;
    algebraic[4] = 2.0;
}

void computeComputedConstants(double *constants, double *computedConstants)
{
    computedConstants[0] = eq(constants[0], constants[1]);
    computedConstants[1] = constants[0]/eq(constants[1], constants[1]);
    computedConstants[2] = neq(constants[0], constants[1]);
    computedConstants[3] = constants[0]/neq(constants[1], constants[2]);
    computedConstants[4] = lt(constants[0], constants[1]);
    computedConstants[5] = constants[0]/lt(constants[1], constants[2]);
    computedConstants[6] = leq(constants[0], constants[1]);
    computedConstants[7] = constants[0]/leq(constants[1], constants[2]);
    computedConstants[8] = gt(constants[0], constants[1]);
    computedConstants[9] = constants[0]/gt(constants[2], constants[1]);
    computedConstants[10] = geq(constants[0], constants[1]);
    computedConstants[11] = constants[0]/geq(constants[2], constants[1]);
    computedConstants[12] = and(constants[0], constants[1]);
    computedConstants[13] = and(constants[0], and(constants[1], constants[2]));
    computedConstants[14] = and(lt(constants[0], constants[1]), gt(constants[2], constants[3]));
    computedConstants[15] = and(constants[0]+constants[1], gt(constants[2], constants[3]));
    computedConstants[16] = and(constants[0], gt(constants[1], constants[2]));
    computedConstants[17] = and(constants[0]-constants[1], gt(constants[2], constants[3]));
    computedConstants[18] = and(-constants[0], gt(constants[1], constants[2]));
    computedConstants[19] = and(pow(constants[0], constants[1]), gt(constants[2], constants[3]));
    computedConstants[20] = and(pow(constants[0], 1.0/constants[1]), gt(constants[2], constants[3]));
    computedConstants[21] = and(lt(constants[0], constants[1]), constants[2]+constants[3]);
    computedConstants[22] = and(lt(constants[0], constants[1]), constants[2]);
    computedConstants[23] = and(lt(constants[0], constants[1]), constants[2]-constants[3]);
    computedConstants[24] = and(lt(constants[0], constants[1]), -constants[2]);
    computedConstants[25] = and(lt(constants[0], constants[1]), pow(constants[2], constants[3]));
    computedConstants[26] = and(lt(constants[0], constants[1]), pow(constants[2], 1.0/constants[3]));
    computedConstants[27] = constants[0]/and(constants[1], constants[2]);
    computedConstants[28] = or(lt(constants[0], constants[1]), gt(constants[2], constants[3]));
    computedConstants[29] = or(constants[0]+constants[1], gt(constants[2], constants[3]));
    computedConstants[30] = or(constants[0], gt(constants[1], constants[2]));
    computedConstants[31] = or(constants[0]-constants[1], gt(constants[2], constants[3]));
    computedConstants[32] = or(-constants[0], gt(constants[1], constants[2]));
    computedConstants[33] = or(pow(constants[0], constants[1]), gt(constants[2], constants[3]));
    computedConstants[34] = or(pow(constants[0], 1.0/constants[1]), gt(constants[2], constants[3]));
    computedConstants[35] = or(lt(constants[0], constants[1]), constants[2]+constants[3]);
    computedConstants[36] = or(lt(constants[0], constants[1]), constants[2]);
    computedConstants[37] = or(lt(constants[0], constants[1]), constants[2]-constants[3]);
    computedConstants[38] = or(lt(constants[0], constants[1]), -constants[2]);
    computedConstants[39] = or(lt(constants[0], constants[1]), pow(constants[2], constants[3]));
    computedConstants[40] = or(lt(constants[0], constants[1]), pow(constants[2], 1.0/constants[3]));
    computedConstants[41] = constants[0]/or(constants[1], constants[2]);
    computedConstants[42] = xor(constants[0], constants[1]);
    computedConstants[43] = xor(constants[0], xor(constants[1], constants[2]));
    computedConstants[44] = xor(lt(constants[0], constants[1]), gt(constants[2], constants[3]));
    computedConstants[45] = xor(constants[0]+constants[1], gt(constants[2], constants[3]));
    computedConstants[46] = xor(constants[0], gt(constants[1], constants[2]));
    computedConstants[47] = xor(constants[0]-constants[1], gt(constants[2], constants[3]));
    computedConstants[48] = xor(-constants[0], gt(constants[1], constants[2]));
    computedConstants[49] = xor(pow(constants[0], constants[1]), gt(constants[2], constants[3]));
    computedConstants[50] = xor(pow(constants[0], 1.0/constants[1]), gt(constants[2], constants[3]));
    computedConstants[51] = xor(lt(constants[0], constants[1]), constants[2]+constants[3]);
    computedConstants[52] = xor(lt(constants[0], constants[1]), constants[2]);
    computedConstants[53] = xor(lt(constants[0], constants[1]), constants[2]-constants[3]);
    computedConstants[54] = xor(lt(constants[0], constants[1]), -constants[2]);
    computedConstants[55] = xor(lt(constants[0], constants[1]), pow(constants[2], constants[3]));
    computedConstants[56] = xor(lt(constants[0], constants[1]), pow(constants[2], 1.0/constants[3]));
    computedConstants[57] = not(constants[0]);
    computedConstants[58] = constants[0]+constants[1]+constants[2];
    computedConstants[59] = lt(constants[0], constants[1])+gt(constants[2], constants[3]);
    computedConstants[60] = constants[0];
    computedConstants[61] = constants[0]-constants[1];
    computedConstants[62] = lt(constants[0], constants[1])-gt(constants[2], constants[3]);
    computedConstants[63] = lt(constants[0], constants[1])-(constants[2]+constants[3]);
    computedConstants[64] = lt(constants[0], constants[1])-constants[2];
    computedConstants[65] = constants[0]-(-constants[1]);
    computedConstants[66] = constants[0]-(-constants[1]*constants[2]);
    computedConstants[67] = -constants[0];
    computedConstants[68] = -lt(constants[0], constants[1]);
    computedConstants[69] = constants[0]*constants[1];
    computedConstants[70] = constants[0]*constants[1]*constants[2];
    computedConstants[71] = lt(constants[0], constants[1])*gt(constants[2], constants[3]);
    computedConstants[72] = (constants[0]+constants[1])*gt(constants[2], constants[3]);
    computedConstants[73] = constants[0]*gt(constants[1], constants[2]);
    computedConstants[74] = (constants[0]-constants[1])*gt(constants[2], constants[3]);
    computedConstants[75] = -constants[0]*gt(constants[1], constants[2]);
    computedConstants[76] = lt(constants[0], constants[1])*(constants[2]+constants[3]);
    computedConstants[77] = lt(constants[0], constants[1])*constants[2];
    computedConstants[78] = lt(constants[0], constants[1])*(constants[2]-constants[3]);
    computedConstants[79] = lt(constants[0], constants[1])*-constants[2];
    computedConstants[80] = constants[0]/constants[1];
    computedConstants[81] = lt(constants[0], constants[1])/gt(constants[3], constants[2]);
    computedConstants[82] = (constants[0]+constants[1])/gt(constants[3], constants[2]);
    computedConstants[83] = constants[0]/gt(constants[2], constants[1]);
    computedConstants[84] = (constants[0]-constants[1])/gt(constants[3], constants[2]);
    computedConstants[85] = -constants[0]/gt(constants[2], constants[1]);
    computedConstants[86] = lt(constants[0], constants[1])/(constants[2]+constants[3]);
    computedConstants[87] = lt(constants[0], constants[1])/constants[2];
    computedConstants[88] = lt(constants[0], constants[1])/(constants[2]-constants[3]);
    computedConstants[89] = lt(constants[0], constants[1])/-constants[2];
    computedConstants[90] = lt(constants[0], constants[1])/(constants[2]*constants[3]);
    computedConstants[91] = lt(constants[0], constants[1])/(constants[2]/constants[3]);
    computedConstants[92] = sqrt(constants[0]);
    computedConstants[93] = pow(constants[0], 2.0);
    computedConstants[94] = pow(constants[0], 3.0);
    computedConstants[95] = pow(constants[0], constants[1]);
    computedConstants[96] = pow(leq(constants[0], constants[1]), geq(constants[2], constants[3]));
    computedConstants[97] = pow(constants[0]+constants[1], geq(constants[2], constants[3]));
    computedConstants[98] = pow(constants[0], geq(constants[1], constants[2]));
    computedConstants[99] = pow(constants[0]-constants[1], geq(constants[2], constants[3]));
    computedConstants[100] = pow(-constants[0], geq(constants[1], constants[2]));
    computedConstants[101] = pow(constants[0]*constants[1], geq(constants[2], constants[3]));
    computedConstants[102] = pow(constants[0]/constants[1], geq(constants[2], constants[3]));
    computedConstants[103] = pow(leq(constants[0], constants[1]), constants[2]+constants[3]);
    computedConstants[104] = pow(leq(constants[0], constants[1]), constants[2]);
    computedConstants[105] = pow(leq(constants[0], constants[1]), constants[2]-constants[3]);
    computedConstants[106] = pow(leq(constants[0], constants[1]), -constants[2]);
    computedConstants[107] = pow(leq(constants[0], constants[1]), constants[2]*constants[3]);
    computedConstants[108] = pow(leq(constants[0], constants[1]), constants[2]/constants[3]);
    computedConstants[109] = pow(leq(constants[0], constants[1]), pow(constants[2], constants[3]));
    computedConstants[110] = pow(leq(constants[0], constants[1]), pow(constants[2], 1.0/constants[3]));
    computedConstants[111] = sqrt(constants[0]);
    computedConstants[112] = sqrt(constants[0]);
    computedConstants[113] = pow(constants[0], 1.0/0.5);
    computedConstants[114] = pow(constants[0], 1.0/3.0);
    computedConstants[115] = pow(constants[0], 1.0/constants[1]);
    computedConstants[116] = pow(lt(constants[0], constants[1]), 1.0/gt(constants[3], constants[2]));
    computedConstants[117] = pow(constants[0]+constants[1], 1.0/gt(constants[3], constants[2]));
    computedConstants[118] = pow(constants[0], 1.0/gt(constants[2], constants[1]));
    computedConstants[119] = pow(constants[0]-constants[1], 1.0/gt(constants[3], constants[2]));
    computedConstants[120] = pow(-constants[0], 1.0/gt(constants[2], constants[1]));
    computedConstants[121] = pow(constants[0]*constants[1], 1.0/gt(constants[3], constants[2]));
    computedConstants[122] = pow(constants[0]/constants[1], 1.0/gt(constants[3], constants[2]));
    computedConstants[123] = pow(lt(constants[0], constants[1]), 1.0/(constants[2]+constants[3]));
    computedConstants[124] = pow(lt(constants[0], constants[1]), 1.0/constants[2]);
    computedConstants[125] = pow(lt(constants[0], constants[1]), 1.0/(constants[2]-constants[3]));
    computedConstants[126] = pow(lt(constants[0], constants[1]), 1.0/-constants[2]);
    computedConstants[127] = pow(lt(constants[0], constants[1]), 1.0/(constants[2]*constants[3]));
    computedConstants[128] = pow(lt(constants[0], constants[1]), 1.0/(constants[2]/constants[3]));
    computedConstants[129] = pow(lt(constants[0], constants[1]), 1.0/pow(constants[2], constants[3]));
    computedConstants[130] = pow(lt(constants[0], constants[1]), 1.0/pow(constants[2], 1.0/constants[3]));
    computedConstants[131] = fabs(constants[0]);
    computedConstants[132] = exp(constants[0]);
    computedConstants[133] = log(constants[0]);
    computedConstants[134] = log10(constants[0]);
    computedConstants[135] = log(constants[0])/log(2.0);
    computedConstants[136] = log10(constants[0]);
    computedConstants[137] = log(constants[0])/log(constants[1]);
    computedConstants[138] = ceil(constants[0]);
    computedConstants[139] = floor(constants[0]);
    computedConstants[140] = fmin(constants[0], constants[1]);
    computedConstants[141] = fmin(constants[0], fmin(constants[1], constants[2]));
    computedConstants[142] = fmax(constants[0], constants[1]);
    computedConstants[143] = fmax(constants[0], fmax(constants[1], constants[2]));
    computedConstants[144] = fmod(constants[0], constants[1]);
    computedConstants[145] = sin(constants[0]);
    computedConstants[146] = cos(constants[0]);
    computedConstants[147] = tan(constants[0]);
    computedConstants[148] = sec(constants[0]);
    computedConstants[149] = csc(constants[0]);
    computedConstants[150] = cot(constants[0]);
    computedConstants[151] = sinh(constants[0]);
    computedConstants[152] = cosh(constants[0]);
    computedConstants[153] = tanh(constants[0]);
    computedConstants[154] = sech(constants[0]);
    computedConstants[155] = csch(constants[0]);
    computedConstants[156] = coth(constants[0]);
    computedConstants[157] = asin(constants[0]);
    computedConstants[158] = acos(constants[0]);
    computedConstants[159] = atan(constants[0]);
    computedConstants[160] = asec(constants[0]);
    computedConstants[161] = acsc(constants[0]);
    computedConstants[162] = acot(constants[0]);
    computedConstants[163] = asinh(constants[0]);
    computedConstants[164] = acosh(constants[0]);
    computedConstants[165] = atanh(constants[0]/2.0);
    computedConstants[166] = asech(constants[0]);
    computedConstants[167] = acsch(constants[0]);
    computedConstants[168] = acoth(2.0*constants[0]);
    computedConstants[170] = (gt(constants[0], constants[1]))?constants[0]:NAN;
    computedConstants[171] = (lt(constants[0], constants[1]))?constants[0]:NAN;
    computedConstants[172] = constants[0];
    computedConstants[173] = (gt(constants[0], constants[1]))?constants[0]:constants[2];
    computedConstants[174] = (gt(constants[0], constants[1]))?constants[0]:(gt(constants[2], constants[3]))?constants[2]:(gt(constants[4], constants[5]))?constants[4]:NAN;
    computedConstants[175] = (lt(constants[0], constants[1]))?constants[0]:(gt(constants[2], constants[3]))?constants[2]:(gt(constants[4], constants[5]))?constants[4]:NAN;
    computedConstants[176] = (gt(constants[0], constants[1]))?constants[0]:(gt(constants[2], constants[3]))?constants[2]:(gt(constants[4], constants[5]))?constants[4]:constants[6];
    computedConstants[177] = 123.0+((gt(constants[0], constants[1]))?constants[0]:NAN);
    computedConstants[178] = 123.0+((lt(constants[0], constants[1]))?constants[0]:NAN);
    computedConstants[183] = constants[0];
    computedConstants[190] = and(constants[0], constants[1])+((gt(constants[2], constants[3]))?constants[1]:NAN)+constants[4]+and(constants[5], constants[6]);
    computedConstants[191] = and(constants[0], constants[1])+((lt(constants[2], constants[3]))?constants[1]:NAN)+constants[4]+and(constants[5], constants[6]);
    computedConstants[192] = and(constants[0], constants[1])-(((gt(constants[2], constants[3]))?constants[1]:NAN)-(constants[4]-((gt(constants[2], constants[3]))?constants[1]:NAN)))-and(constants[5], constants[6]);
    computedConstants[193] = and(constants[0], constants[1])-(((lt(constants[2], constants[3]))?constants[1]:NAN)-(constants[4]-((lt(constants[2], constants[3]))?constants[1]:NAN)))-and(constants[5], constants[6]);
    computedConstants[194] = and(constants[0], constants[1])*((gt(constants[2], constants[3]))?constants[1]:NAN)*constants[4]*((gt(constants[2], constants[3]))?constants[1]:NAN)*and(constants[5], constants[6]);
    computedConstants[195] = and(constants[0], constants[1])*((lt(constants[2], constants[3]))?constants[1]:NAN)*constants[4]*((lt(constants[2], constants[3]))?constants[1]:NAN)*and(constants[5], constants[6]);
    computedConstants[196] = and(constants[0], constants[1])/(((gt(constants[2], constants[3]))?constants[1]:NAN)/(constants[4]/((gt(constants[2], constants[3]))?constants[1]:NAN)));
    computedConstants[197] = and(constants[0], constants[1])/(((lt(constants[2], constants[3]))?constants[1]:NAN)/(constants[4]/((lt(constants[2], constants[3]))?constants[1]:NAN)));
    computedConstants[198] = and(or(constants[0], constants[1]), and(xor(constants[0], constants[1]), and((gt(constants[2], constants[3]))?constants[1]:NAN, and(and(and(constants[4], (gt(constants[2], constants[3]))?constants[1]:NAN), xor(constants[0], constants[1])), or(constants[0], constants[1])))));
    computedConstants[199] = or(and(constants[0], constants[1]), or(xor(constants[0], constants[1]), or((gt(constants[2], constants[3]))?constants[1]:NAN, or(or(or(constants[4], (gt(constants[2], constants[3]))?constants[1]:NAN), xor(constants[0], constants[1])), and(constants[0], constants[1])))));
    computedConstants[200] = xor(and(constants[0], constants[1]), xor(or(constants[0], constants[1]), xor((gt(constants[2], constants[3]))?constants[1]:NAN, xor(xor(xor(constants[4], (gt(constants[2], constants[3]))?constants[1]:NAN), or(constants[0], constants[1])), and(constants[0], constants[1])))));
    computedConstants[201] = pow(and(constants[0], constants[1]), pow((gt(constants[2], constants[3]))?constants[1]:NAN, pow(pow(constants[4], (gt(constants[2], constants[3]))?constants[1]:NAN), and(constants[0], constants[1]))));
    computedConstants[202] = pow(pow(pow(and(constants[0], constants[1]), 1.0/pow((gt(constants[2], constants[3]))?constants[1]:NAN, 1.0/constants[4])), 1.0/((gt(constants[2], constants[3]))?constants[1]:NAN)), 1.0/and(constants[0], constants[1]));
    computedConstants[203] = -and(constants[0], constants[1])+-((gt(constants[2], constants[3]))?constants[1]:NAN);
    computedConstants[204] = -and(constants[0], constants[1])+-((lt(constants[2], constants[3]))?constants[1]:NAN);
}

void computeRates(double voi, double *states, double *rates, double *constants, double *computedConstants, double *algebraic, double *externals, ExternalVariable externalVariable)
{
    rates[0] = 1.0;
}

void computeVariables(double voi, double *states, double *rates, double *constants, double *computedConstants, double *algebraic, double *externals, ExternalVariable externalVariable)
{
    algebraic[0] = or(states[0], states[0]);
    algebraic[1] = or(states[0], or(states[0], constants[0]));
    algebraic[2] = constants[0]/xor(constants[1], states[0]);
    externals[0] = externalVariable(voi, states, rates, constants, computedConstants, algebraic, externals, 0);
    findRoot0(voi, states, rates, constants, computedConstants, algebraic, externals);
}
