/* The content of this file was generated using a modified C profile of libCellML 0.5.0. */

#include "customheaderfile.h"

double min(double x, double y)
{
    return (x < y)?x:y;
}

double max(double x, double y)
{
    return (x > y)?x:y;
}

double sec(double x)
{
    return 1.0/cos(x);
}

double csc(double x)
{
    return 1.0/sin(x);
}

double cot(double x)
{
    return 1.0/tan(x);
}

double sech(double x)
{
    return 1.0/cosh(x);
}

double csch(double x)
{
    return 1.0/sinh(x);
}

double coth(double x)
{
    return 1.0/tanh(x);
}

double asec(double x)
{
    return acos(1.0/x);
}

double acsc(double x)
{
    return asin(1.0/x);
}

double acot(double x)
{
    return atan(1.0/x);
}

double asech(double x)
{
    double oneOverX = 1.0/x;

    return log(oneOverX+sqrt(oneOverX*oneOverX-1.0));
}

double acsch(double x)
{
    double oneOverX = 1.0/x;

    return log(oneOverX+sqrt(oneOverX*oneOverX+1.0));
}

double acoth(double x)
{
    double oneOverX = 1.0/x;

    return 0.5*log((1.0+oneOverX)/(1.0-oneOverX));
}

typedef struct {
    double voi;
    double *states;
    double *rates;
    double *variables;
} RootFindingInfo;

extern void nlaSolve(void (*objectiveFunction)(double *, double *, void *),
                     double *u, size_t n, void *data);

void objectiveFunction0(double *u, double *f, void *data)
{
    double voi = ((RootFindingInfo *) data)->voi;
    double *states = ((RootFindingInfo *) data)->states;
    double *rates = ((RootFindingInfo *) data)->rates;
    double *variables = ((RootFindingInfo *) data)->variables;

    algebraic[0] = u[0];
    algebraic[1] = u[1];

    f[0] = algebraic[0]+algebraic[1]+states[0]-0.0;
    f[1] = algebraic[0]-algebraic[1]-(computedConstants[198]+computedConstants[199]);
}

void findRoot0(double voi, double *states, double *rates, double *variables)
{
    RootFindingInfo rfi = { voi, states, rates, variables };
    double u[2];

    u[0] = algebraic[0];
    u[1] = algebraic[1];

    nlaSolve(objectiveFunction0, u, 2, &rfi);

    algebraic[0] = u[0];
    algebraic[1] = u[1];
}

void initialiseVariables(double *states, double *rates, double *constants, double *algebraic)
{
    constants[0] = 1.0;
    constants[1] = 2.0;
    constants[2] = 3.0;
    constants[3] = 4.0;
    constants[4] = 5.0;
    constants[5] = 6.0;
    constants[6] = 7.0;
    algebraic[0] = 1.0;
    algebraic[1] = 2.0;
    computedConstants[177] = 123.0;
    computedConstants[178] = 123.456789;
    computedConstants[179] = 123.0e99;
    computedConstants[180] = 123.456789e99;
    computedConstants[182] = 1.0;
    computedConstants[183] = 0.0;
    computedConstants[184] = 2.71828182845905;
    computedConstants[185] = 3.14159265358979;
    computedConstants[186] = INFINITY;
    computedConstants[187] = NAN;
    computedConstants[198] = 1.0;
    computedConstants[199] = 3.0;
    states[0] = 0.0;
}

void computeComputedConstants(double *constants, double *computedConstants)
{
    computedConstants[0] = constants[0] == constants[1];
    computedConstants[1] = constants[0]/(constants[1] == constants[1]);
    computedConstants[2] = constants[0] != constants[1];
    computedConstants[3] = constants[0]/(constants[1] != constants[2]);
    computedConstants[4] = constants[0] < constants[1];
    computedConstants[5] = constants[0]/(constants[1] < constants[2]);
    computedConstants[6] = constants[0] <= constants[1];
    computedConstants[7] = constants[0]/(constants[1] <= constants[2]);
    computedConstants[8] = constants[0] > constants[1];
    computedConstants[9] = constants[0]/(constants[1] > constants[2]);
    computedConstants[10] = constants[0] >= constants[1];
    computedConstants[11] = constants[0]/(constants[1] >= constants[2]);
    computedConstants[12] = constants[0] && constants[1];
    computedConstants[13] = constants[0] && constants[1] && constants[2];
    computedConstants[14] = (constants[0] < constants[1]) && (constants[2] > constants[3]);
    computedConstants[15] = (constants[0]+constants[1]) && (constants[2] > constants[3]);
    computedConstants[16] = constants[0] && (constants[1] > constants[2]);
    computedConstants[17] = (constants[0]-constants[1]) && (constants[2] > constants[3]);
    computedConstants[18] = -constants[0] && (constants[1] > constants[2]);
    computedConstants[19] = (constants[0]^^constants[1]) && (constants[2] > constants[3]);
    computedConstants[20] = (constants[0]^^(1.0/constants[1])) && (constants[2] > constants[3]);
    computedConstants[21] = (constants[0] < constants[1]) && (constants[2]+constants[3]);
    computedConstants[22] = (constants[0] < constants[1]) && constants[2];
    computedConstants[23] = (constants[0] < constants[1]) && (constants[2]-constants[3]);
    computedConstants[24] = (constants[0] < constants[1]) && -constants[2];
    computedConstants[25] = (constants[0] < constants[1]) && (constants[2]^^constants[3]);
    computedConstants[26] = (constants[0] < constants[1]) && (constants[2]^^(1.0/constants[3]));
    computedConstants[27] = constants[0]/(constants[1] && constants[2]);
    computedConstants[28] = constants[0] || constants[1];
    computedConstants[29] = constants[0] || constants[1] || constants[2];
    computedConstants[30] = (constants[0] < constants[1]) || (constants[2] > constants[3]);
    computedConstants[31] = (constants[0]+constants[1]) || (constants[2] > constants[3]);
    computedConstants[32] = constants[0] || (constants[1] > constants[2]);
    computedConstants[33] = (constants[0]-constants[1]) || (constants[2] > constants[3]);
    computedConstants[34] = -constants[0] || (constants[1] > constants[2]);
    computedConstants[35] = (constants[0]^^constants[1]) || (constants[2] > constants[3]);
    computedConstants[36] = (constants[0]^^(1.0/constants[1])) || (constants[2] > constants[3]);
    computedConstants[37] = (constants[0] < constants[1]) || (constants[2]+constants[3]);
    computedConstants[38] = (constants[0] < constants[1]) || constants[2];
    computedConstants[39] = (constants[0] < constants[1]) || (constants[2]-constants[3]);
    computedConstants[40] = (constants[0] < constants[1]) || -constants[2];
    computedConstants[41] = (constants[0] < constants[1]) || (constants[2]^^constants[3]);
    computedConstants[42] = (constants[0] < constants[1]) || (constants[2]^^(1.0/constants[3]));
    computedConstants[43] = constants[0]/(constants[1] || constants[2]);
    computedConstants[44] = constants[0]^constants[1];
    computedConstants[45] = constants[0]^constants[1]^constants[2];
    computedConstants[46] = (constants[0] < constants[1])^(constants[2] > constants[3]);
    computedConstants[47] = (constants[0]+constants[1])^(constants[2] > constants[3]);
    computedConstants[48] = constants[0]^(constants[1] > constants[2]);
    computedConstants[49] = (constants[0]-constants[1])^(constants[2] > constants[3]);
    computedConstants[50] = -constants[0]^(constants[1] > constants[2]);
    computedConstants[51] = (constants[0]^^constants[1])^(constants[2] > constants[3]);
    computedConstants[52] = (constants[0]^^(1.0/constants[1]))^(constants[2] > constants[3]);
    computedConstants[53] = (constants[0] < constants[1])^(constants[2]+constants[3]);
    computedConstants[54] = (constants[0] < constants[1])^constants[2];
    computedConstants[55] = (constants[0] < constants[1])^(constants[2]-constants[3]);
    computedConstants[56] = (constants[0] < constants[1])^-constants[2];
    computedConstants[57] = (constants[0] < constants[1])^(constants[2]^^constants[3]);
    computedConstants[58] = (constants[0] < constants[1])^(constants[2]^^(1.0/constants[3]));
    computedConstants[59] = constants[0]/(constants[1]^constants[2]);
    computedConstants[60] = !constants[0];
    computedConstants[61] = constants[0]+constants[1];
    computedConstants[62] = constants[0]+constants[1]+constants[2];
    computedConstants[63] = (constants[0] < constants[1])+(constants[2] > constants[3]);
    computedConstants[64] = constants[0];
    computedConstants[65] = constants[0]-constants[1];
    computedConstants[66] = (constants[0] < constants[1])-(constants[2] > constants[3]);
    computedConstants[67] = (constants[0] < constants[1])-(constants[2]+constants[3]);
    computedConstants[68] = (constants[0] < constants[1])-constants[2];
    computedConstants[69] = constants[0]-(-constants[1]);
    computedConstants[70] = constants[0]-(-constants[1]*constants[2]);
    computedConstants[71] = -constants[0];
    computedConstants[72] = -(constants[0] < constants[1]);
    computedConstants[73] = constants[0]*constants[1];
    computedConstants[74] = constants[0]*constants[1]*constants[2];
    computedConstants[75] = (constants[0] < constants[1])*(constants[2] > constants[3]);
    computedConstants[76] = (constants[0]+constants[1])*(constants[2] > constants[3]);
    computedConstants[77] = constants[0]*(constants[1] > constants[2]);
    computedConstants[78] = (constants[0]-constants[1])*(constants[2] > constants[3]);
    computedConstants[79] = -constants[0]*(constants[1] > constants[2]);
    computedConstants[80] = (constants[0] < constants[1])*(constants[2]+constants[3]);
    computedConstants[81] = (constants[0] < constants[1])*constants[2];
    computedConstants[82] = (constants[0] < constants[1])*(constants[2]-constants[3]);
    computedConstants[83] = (constants[0] < constants[1])*-constants[2];
    computedConstants[84] = constants[0]/constants[1];
    computedConstants[85] = (constants[0] < constants[1])/(constants[3] > constants[2]);
    computedConstants[86] = (constants[0]+constants[1])/(constants[3] > constants[2]);
    computedConstants[87] = constants[0]/(constants[2] > constants[1]);
    computedConstants[88] = (constants[0]-constants[1])/(constants[3] > constants[2]);
    computedConstants[89] = -constants[0]/(constants[2] > constants[1]);
    computedConstants[90] = (constants[0] < constants[1])/(constants[2]+constants[3]);
    computedConstants[91] = (constants[0] < constants[1])/constants[2];
    computedConstants[92] = (constants[0] < constants[1])/(constants[2]-constants[3]);
    computedConstants[93] = (constants[0] < constants[1])/-constants[2];
    computedConstants[94] = (constants[0] < constants[1])/(constants[2]*constants[3]);
    computedConstants[95] = (constants[0] < constants[1])/(constants[2]/constants[3]);
    computedConstants[96] = sqrt(constants[0]);
    computedConstants[97] = sqr(constants[0]);
    computedConstants[98] = constants[0]^^3.0;
    computedConstants[99] = constants[0]^^constants[1];
    computedConstants[100] = (constants[0] <= constants[1])^^(constants[2] >= constants[3]);
    computedConstants[101] = (constants[0]+constants[1])^^(constants[2] >= constants[3]);
    computedConstants[102] = constants[0]^^(constants[1] >= constants[2]);
    computedConstants[103] = (constants[0]-constants[1])^^(constants[2] >= constants[3]);
    computedConstants[104] = (-constants[0])^^(constants[1] >= constants[2]);
    computedConstants[105] = (constants[0]*constants[1])^^(constants[2] >= constants[3]);
    computedConstants[106] = (constants[0]/constants[1])^^(constants[2] >= constants[3]);
    computedConstants[107] = (constants[0] <= constants[1])^^(constants[2]+constants[3]);
    computedConstants[108] = (constants[0] <= constants[1])^^constants[2];
    computedConstants[109] = (constants[0] <= constants[1])^^constants[2]-constants[3];
    computedConstants[110] = (constants[0] <= constants[1])^^-constants[2];
    computedConstants[111] = (constants[0] <= constants[1])^^(constants[2]*constants[3]);
    computedConstants[112] = (constants[0] <= constants[1])^^(constants[2]/constants[3]);
    computedConstants[113] = (constants[0] <= constants[1])^^(constants[2]^^constants[3]);
    computedConstants[114] = (constants[0] <= constants[1])^^(constants[2]^^(1.0/constants[3]));
    computedConstants[115] = sqrt(constants[0]);
    computedConstants[116] = sqrt(constants[0]);
    computedConstants[117] = constants[0]^^(1.0/3.0);
    computedConstants[118] = constants[0]^^(1.0/constants[1]);
    computedConstants[119] = (constants[0] < constants[1])^^(1.0/(constants[3] > constants[2]));
    computedConstants[120] = (constants[0]+constants[1])^^(1.0/(constants[3] > constants[2]));
    computedConstants[121] = constants[0]^^(1.0/(constants[2] > constants[1]));
    computedConstants[122] = (constants[0]-constants[1])^^(1.0/(constants[3] > constants[2]));
    computedConstants[123] = (-constants[0])^^(1.0/(constants[2] > constants[1]));
    computedConstants[124] = (constants[0]*constants[1])^^(1.0/(constants[3] > constants[2]));
    computedConstants[125] = (constants[0]/constants[1])^^(1.0/(constants[3] > constants[2]));
    computedConstants[126] = (constants[0] < constants[1])^^(1.0/(constants[2]+constants[3]));
    computedConstants[127] = (constants[0] < constants[1])^^(1.0/constants[2]);
    computedConstants[128] = (constants[0] < constants[1])^^(1.0/(constants[2]-constants[3]));
    computedConstants[129] = (constants[0] < constants[1])^^(1.0/(-constants[2]));
    computedConstants[130] = (constants[0] < constants[1])^^(1.0/(constants[2]*constants[3]));
    computedConstants[131] = (constants[0] < constants[1])^^(1.0/(constants[2]/constants[3]));
    computedConstants[132] = (constants[0] < constants[1])^^(1.0/(constants[2]^^constants[3]));
    computedConstants[133] = (constants[0] < constants[1])^^(1.0/(constants[2]^^(1.0/constants[3])));
    computedConstants[134] = fabs(constants[0]);
    computedConstants[135] = exp(constants[0]);
    computedConstants[136] = log(constants[0]);
    computedConstants[137] = log10(constants[0]);
    computedConstants[138] = log(constants[0])/log(2.0);
    computedConstants[139] = log10(constants[0]);
    computedConstants[140] = log(constants[0])/log(constants[1]);
    computedConstants[141] = ceil(constants[0]);
    computedConstants[142] = floor(constants[0]);
    computedConstants[143] = min(constants[0], constants[1]);
    computedConstants[144] = min(constants[0], min(constants[1], constants[2]));
    computedConstants[145] = max(constants[0], constants[1]);
    computedConstants[146] = max(constants[0], max(constants[1], constants[2]));
    computedConstants[147] = fmod(constants[0], constants[1]);
    computedConstants[148] = sin(constants[0]);
    computedConstants[149] = cos(constants[0]);
    computedConstants[150] = tan(constants[0]);
    computedConstants[151] = sec(constants[0]);
    computedConstants[152] = csc(constants[0]);
    computedConstants[153] = cot(constants[0]);
    computedConstants[154] = sinh(constants[0]);
    computedConstants[155] = cosh(constants[0]);
    computedConstants[156] = tanh(constants[0]);
    computedConstants[157] = sech(constants[0]);
    computedConstants[158] = csch(constants[0]);
    computedConstants[159] = coth(constants[0]);
    computedConstants[160] = asin(constants[0]);
    computedConstants[161] = acos(constants[0]);
    computedConstants[162] = atan(constants[0]);
    computedConstants[163] = asec(constants[0]);
    computedConstants[164] = acsc(constants[0]);
    computedConstants[165] = acot(constants[0]);
    computedConstants[166] = asinh(constants[0]);
    computedConstants[167] = acosh(constants[0]);
    computedConstants[168] = atanh(constants[0]/2.0);
    computedConstants[169] = asech(constants[0]);
    computedConstants[170] = acsch(constants[0]);
    computedConstants[171] = acoth(2.0*constants[0]);
    computedConstants[172] = piecewise(constants[0] > constants[1], constants[0], NAN);
    computedConstants[173] = piecewise(constants[0] > constants[1], constants[0], constants[2]);
    computedConstants[174] = piecewise(constants[0] > constants[1], constants[0], piecewise(constants[2] > constants[3], constants[2], piecewise(constants[4] > constants[5], constants[4], NAN)));
    computedConstants[175] = piecewise(constants[0] > constants[1], constants[0], piecewise(constants[2] > constants[3], constants[2], piecewise(constants[4] > constants[5], constants[4], constants[6])));
    computedConstants[176] = 123.0+piecewise(constants[0] > constants[1], constants[0], NAN);
    computedConstants[181] = constants[0];
    computedConstants[188] = (constants[0] && constants[1])+piecewise(constants[2] > constants[3], constants[1], NAN)+constants[4]+(constants[5] && constants[6]);
    computedConstants[189] = (constants[0] && constants[1])-(piecewise(constants[2] > constants[3], constants[1], NAN)-(constants[4]-piecewise(constants[2] > constants[3], constants[1], NAN)))-(constants[5] && constants[6]);
    computedConstants[190] = (constants[0] && constants[1])*piecewise(constants[2] > constants[3], constants[1], NAN)*constants[4]*piecewise(constants[2] > constants[3], constants[1], NAN)*(constants[5] && constants[6]);
    computedConstants[191] = (constants[0] && constants[1])/(piecewise(constants[2] > constants[3], constants[1], NAN)/(constants[4]/piecewise(constants[2] > constants[3], constants[1], NAN)));
    computedConstants[192] = (constants[0] || constants[1]) && (constants[0]^constants[1]) && piecewise(constants[2] > constants[3], constants[1], NAN) && constants[4] && piecewise(constants[2] > constants[3], constants[1], NAN) && (constants[0]^constants[1]) && (constants[0] || constants[1]);
    computedConstants[193] = (constants[0] && constants[1]) || (constants[0]^constants[1]) || piecewise(constants[2] > constants[3], constants[1], NAN) || constants[4] || piecewise(constants[2] > constants[3], constants[1], NAN) || (constants[0]^constants[1]) || (constants[0] && constants[1]);
    computedConstants[194] = (constants[0] && constants[1])^(constants[0] || constants[1])^piecewise(constants[2] > constants[3], constants[1], NAN)^constants[4]^piecewise(constants[2] > constants[3], constants[1], NAN)^(constants[0] || constants[1])^(constants[0] && constants[1]);
    computedConstants[195] = (constants[0] && constants[1])^^(piecewise(constants[2] > constants[3], constants[1], NAN)^^(constants[4]^^piecewise(constants[2] > constants[3], constants[1], NAN)^^(constants[0] && constants[1])));
    computedConstants[196] = (constants[0] && constants[1])^^(1.0/(piecewise(constants[2] > constants[3], constants[1], NAN)^^(1.0/constants[4])))^^(1.0/piecewise(constants[2] > constants[3], constants[1], NAN))^^(1.0/(constants[0] && constants[1]));
    computedConstants[197] = -(constants[0] && constants[1])+-piecewise(constants[2] > constants[3], constants[1], NAN);
}

void computeRates(double voi, double *states, double *rates, double *constants, double *computedConstants, double *algebraic)
{
    rates[0] = 1.0;
}
